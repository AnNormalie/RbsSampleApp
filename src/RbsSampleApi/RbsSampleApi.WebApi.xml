<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RbsSampleApi</name>
    </assembly>
    <members>
        <member name="M:RbsSampleApi.Controllers.v1.LanguagesController.AddLanguage(RBSSample.Shared.Dtos.Language.LanguageForCreationDto)">
            <summary>
            Creates a new Language record.
            </summary>
            <response code="201">Language created.</response>
            <response code="400">Language has missing/invalid values.</response>
            <response code="500">There was an error on the server while creating the Language.</response>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LanguagesController.GetLanguage(System.Guid,System.String[])">
            <summary>
            Gets a single Language by ID.
            </summary>
            <response code="200">Language record returned successfully.</response>
            <response code="400">Language has missing/invalid values.</response>
            <response code="500">There was an error on the server while creating the Language.</response>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LanguagesController.GetLanguages(RBSSample.Shared.Dtos.Language.LanguageParametersDto)">
             <summary>
             Gets a list of all Languages.
             </summary>
             <response code="200">Language list returned successfully.</response>
             <response code="400">Language has missing/invalid values.</response>
             <response code="500">There was an error on the server while creating the Language.</response>
             <remarks>
             Requests can be narrowed down with a variety of query string values:
             ## Query String Parameters
             - **PageNumber**: An integer value that designates the page of records that should be returned.
             - **PageSize**: An integer value that designates the number of records returned on the given page that you would like to return. This value is capped by the internal MaxPageSize.
             - **SortOrder**: A comma delimited ordered list of property names to sort by. Adding a `-` before the name switches to sorting descendingly.
             - **Filters**: A comma delimited list of fields to filter by formatted as `{Name}{Operator}{Value}` where
                 - {Name} is the name of a filterable property. You can also have multiple names (for OR logic) by enclosing them in brackets and using a pipe delimiter, eg. `(LikeCount|CommentCount)>10` asks if LikeCount or CommentCount is >10
                 - {Operator} is one of the Operators below
                 - {Value} is the value to use for filtering. You can also have multiple values (for OR logic) by using a pipe delimiter, eg.`Title@= new|hot` will return posts with titles that contain the text "new" or "hot"
            
                | Operator | Meaning                       | Operator  | Meaning                                      |
                | -------- | ----------------------------- | --------- | -------------------------------------------- |
                | `==`     | Equals                        |  `!@=`    | Does not Contains                            |
                | `!=`     | Not equals                    |  `!_=`    | Does not Starts with                         |
                | `>`      | Greater than                  |  `@=*`    | Case-insensitive string Contains             |
                | `&lt;`   | Less than                     |  `_=*`    | Case-insensitive string Starts with          |
                | `>=`     | Greater than or equal to      |  `==*`    | Case-insensitive string Equals               |
                | `&lt;=`  | Less than or equal to         |  `!=*`    | Case-insensitive string Not equals           |
                | `@=`     | Contains                      |  `!@=*`   | Case-insensitive string does not Contains    |
                | `_=`     | Starts with                   |  `!_=*`   | Case-insensitive string does not Starts with |
             </remarks>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LanguagesController.UpdateLanguage(System.Guid,RBSSample.Shared.Dtos.Language.LanguageForUpdateDto)">
            <summary>
            Updates an entire existing Language.
            </summary>
            <response code="204">Language updated.</response>
            <response code="400">Language has missing/invalid values.</response>
            <response code="500">There was an error on the server while creating the Language.</response>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LanguagesController.DeleteLanguage(System.Guid)">
            <summary>
            Deletes an existing Language record.
            </summary>
            <response code="204">Language deleted.</response>
            <response code="400">Language has missing/invalid values.</response>
            <response code="500">There was an error on the server while creating the Language.</response>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LocationsController.AddLocation(RBSSample.Shared.Dtos.Location.LocationForCreationDto)">
            <summary>
            Creates a new Location record.
            </summary>
            <response code="201">Location created.</response>
            <response code="400">Location has missing/invalid values.</response>
            <response code="500">There was an error on the server while creating the Location.</response>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LocationsController.GetLocation(System.Guid,System.String[])">
            <summary>
            Gets a single Location by ID.
            </summary>
            <response code="200">Location record returned successfully.</response>
            <response code="400">Location has missing/invalid values.</response>
            <response code="500">There was an error on the server while creating the Location.</response>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LocationsController.GetLocations(RBSSample.Shared.Dtos.Location.LocationParametersDto)">
             <summary>
             Gets a list of all Locations.
             </summary>
             <response code="200">Location list returned successfully.</response>
             <response code="400">Location has missing/invalid values.</response>
             <response code="500">There was an error on the server while creating the Location.</response>
             <remarks>
             Requests can be narrowed down with a variety of query string values:
             ## Query String Parameters
             - **PageNumber**: An integer value that designates the page of records that should be returned.
             - **PageSize**: An integer value that designates the number of records returned on the given page that you would like to return. This value is capped by the internal MaxPageSize.
             - **SortOrder**: A comma delimited ordered list of property names to sort by. Adding a `-` before the name switches to sorting descendingly.
             - **Filters**: A comma delimited list of fields to filter by formatted as `{Name}{Operator}{Value}` where
                 - {Name} is the name of a filterable property. You can also have multiple names (for OR logic) by enclosing them in brackets and using a pipe delimiter, eg. `(LikeCount|CommentCount)>10` asks if LikeCount or CommentCount is >10
                 - {Operator} is one of the Operators below
                 - {Value} is the value to use for filtering. You can also have multiple values (for OR logic) by using a pipe delimiter, eg.`Title@= new|hot` will return posts with titles that contain the text "new" or "hot"
            
                | Operator | Meaning                       | Operator  | Meaning                                      |
                | -------- | ----------------------------- | --------- | -------------------------------------------- |
                | `==`     | Equals                        |  `!@=`    | Does not Contains                            |
                | `!=`     | Not equals                    |  `!_=`    | Does not Starts with                         |
                | `>`      | Greater than                  |  `@=*`    | Case-insensitive string Contains             |
                | `&lt;`   | Less than                     |  `_=*`    | Case-insensitive string Starts with          |
                | `>=`     | Greater than or equal to      |  `==*`    | Case-insensitive string Equals               |
                | `&lt;=`  | Less than or equal to         |  `!=*`    | Case-insensitive string Not equals           |
                | `@=`     | Contains                      |  `!@=*`   | Case-insensitive string does not Contains    |
                | `_=`     | Starts with                   |  `!_=*`   | Case-insensitive string does not Starts with |
             </remarks>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LocationsController.UpdateLocation(System.Guid,RBSSample.Shared.Dtos.Location.LocationForUpdateDto)">
            <summary>
            Updates an entire existing Location.
            </summary>
            <response code="204">Location updated.</response>
            <response code="400">Location has missing/invalid values.</response>
            <response code="500">There was an error on the server while creating the Location.</response>
        </member>
        <member name="M:RbsSampleApi.Controllers.v1.LocationsController.DeleteLocation(System.Guid)">
            <summary>
            Deletes an existing Location record.
            </summary>
            <response code="204">Location deleted.</response>
            <response code="400">Location has missing/invalid values.</response>
            <response code="500">There was an error on the server while creating the Location.</response>
        </member>
    </members>
</doc>
